{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "mw2VBrBcgvGa"
   },
   "source": [
    "# Callbacks"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [],
   "source": [
    "import tensorflow as tf\n",
    "from tensorflow.keras.layers import Dense\n",
    "import numpy as np\n",
    "\n",
    "# Prepare Data - y = x+1\n",
    "x = np.array([1,2,3,4,5,6,7,8,9,10], dtype = np.float)\n",
    "y = np.array([2,3,4,5,6,7,8,9,10,11], dtype = np.float)\n",
    "\n",
    "\n",
    "def get_model():\n",
    "    \n",
    "    # Create Model\n",
    "    model = tf.keras.models.Sequential([\n",
    "      Dense(1, input_shape = (1,))\n",
    "    ])\n",
    "\n",
    "    # Compile Model\n",
    "    model.compile(optimizer='sgd',\n",
    "                  loss='mse',\n",
    "                  metrics=['mae'])\n",
    "    return model"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Create Callback"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [],
   "source": [
    "class myCallback(tf.keras.callbacks.Callback):\n",
    "    def on_epoch_end(self, epoch, logs={}):\n",
    "        print(\"loss on epoch {}: {}\".format(epoch, logs['loss']))\n",
    "\n",
    "cb = myCallback()\n",
    "\n",
    "# Fit Model\n",
    "model = get_model()\n",
    "model.fit(x, y, epochs=100, callbacks=[cb], verbose = 0)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Callback to stop training"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {
    "collapsed": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/100\n",
      "1/1 [==============================] - 0s 2ms/step - loss: 232.8750 - mae: 13.7348\n",
      "Epoch 2/100\n",
      "1/1 [==============================] - 0s 998us/step - loss: 10.7713 - mae: 3.0493\n",
      "Epoch 3/100\n",
      "1/1 [==============================] - 0s 2ms/step - loss: 0.5801 - mae: 0.7600\n",
      "Epoch 4/100\n",
      "1/1 [==============================] - ETA: 0s - loss: 0.1118 - mae: 0.2775\n",
      "Loss has reached 0.3\n",
      "1/1 [==============================] - 0s 2ms/step - loss: 0.1118 - mae: 0.2775\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<tensorflow.python.keras.callbacks.History at 0x1ee6f19ac48>"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "class myCallback(tf.keras.callbacks.Callback):\n",
    "    def on_epoch_end(self, epoch, logs={}):\n",
    "        if(logs['loss'] <= 0.3):\n",
    "            print('\\nLoss has reached 0.3')\n",
    "            self.model.stop_training = True\n",
    "\n",
    "cb = myCallback()\n",
    "\n",
    "# Fit Model\n",
    "model = get_model()\n",
    "model.fit(x, y, epochs=100, callbacks=[cb], verbose = 1)"
   ]
  }
 ],
 "metadata": {
  "coursera": {
   "course_slug": "introduction-tensorflow",
   "graded_item_id": "jRjw8",
   "launcher_item_id": "YoQKl"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
